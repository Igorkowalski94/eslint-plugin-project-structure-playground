{
  // !!! The project uses ESLint's new config system as default. If you want to test on the old eslint config, follow README.md steps !!!
  "overrides": [
    /**
     *  Only for the project-structure/folder-structure rule,
     *  which must use the projectStructureParser to check all file extensions not supported by ESLint.
     *  If you don't care about validating other file extensions, you can remove this section.
     */
    {
      "files": [
        // You can expand the list with the file extensions you use.
        "*.css",
        "*.sass",
        "*.less",
        "*.svg",
        "*.png",
        "*.jpg",
        "*.ico",
        "*.yml",
        "*.json"
      ],
      "parser": "eslint-plugin-project-structure/parser",
      "plugins": ["project-structure"],
      "settings": {
        "project-structure/folder-structure-config-path": "folderStructure.json"
      },
      "rules": { "project-structure/folder-structure": "error" }
    },

    /**
     *  Here you will add your normal rules, which use @typescript-eslint/parser.
     */
    {
      "files": ["*.ts", "*.tsx", ".js", ".jsx"],
      "parser": "@typescript-eslint/parser",
      "plugins": ["project-structure"],
      "settings": {
        "project-structure/folder-structure-config-path": "folderStructure.json",
        "project-structure/independent-modules-config-path": "independentModules.json"
      },
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended"
      ],
      "rules": {
        "@typescript-eslint/no-empty-object-type": "off",
        "project-structure/folder-structure": "error",
        "project-structure/independent-modules": "error",
        "project-structure/naming-rules": [
          "error",
          {
            "filePattern": "**/*consts.ts",
            "rules": [
              {
                "nameType": "VariableDeclarator",
                "allowNames": ["{SNAKE_CASE}"]
              }
            ]
          },
          {
            "filePattern": "**/*.types.ts",
            "rules": [
              {
                "nameType": [
                  "TSInterfaceDeclaration",
                  "TSTypeAliasDeclaration"
                ],
                "allowNamesFileRoot": ["{PascalCase}"]
              },
              {
                "nameType": "TSEnumDeclaration",
                "allowNames": ["{SNAKE_CASE}"]
              }
            ]
          },
          {
            "filePattern": "**/*.tsx",
            "rules": [
              {
                "nameType": ["ArrowFunctionExpression", "FunctionDeclaration"],
                "allowNamesFileRoot": ["{filename_PascalCase}"],
                "allowNames": ["{camelCase}"]
              },
              {
                "nameType": [
                  "TSInterfaceDeclaration",
                  "TSTypeAliasDeclaration"
                ],
                "allowNamesFileRoot": [
                  "{filename_PascalCase}Props",
                  "{filename_PascalCase}Return"
                ]
              },
              {
                "nameType": ["VariableDeclarator"],
                "allowNames": ["{camelCase}"]
              }
            ]
          },
          {
            "filePattern": "**/*.ts",
            "rules": [
              {
                "nameType": ["ArrowFunctionExpression", "FunctionDeclaration"],
                "allowNamesFileRoot": ["{filename_camelCase}"],
                "allowNames": ["{camelCase}"]
              },
              {
                "nameType": [
                  "TSInterfaceDeclaration",
                  "TSTypeAliasDeclaration"
                ],
                "allowNamesFileRoot": [
                  "{filename_PascalCase}Props",
                  "{filename_PascalCase}Return"
                ]
              },
              {
                "nameType": "VariableDeclarator",
                "allowNames": ["{camelCase}"]
              }
            ]
          }
        ]
      }
    }
  ]
}
